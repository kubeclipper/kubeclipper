// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_tenant is a generated GoMock package.
package mock_tenant

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kubeclipper/kubeclipper/pkg/models"
	query "github.com/kubeclipper/kubeclipper/pkg/query"
	v1 "github.com/kubeclipper/kubeclipper/pkg/scheme/tenant/v1"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockOperator) CreateProject(ctx context.Context, r *v1.Project) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, r)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockOperatorMockRecorder) CreateProject(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockOperator)(nil).CreateProject), ctx, r)
}

// DeleteProject mocks base method.
func (m *MockOperator) DeleteProject(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockOperatorMockRecorder) DeleteProject(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockOperator)(nil).DeleteProject), ctx, name)
}

// GetProject mocks base method.
func (m *MockOperator) GetProject(ctx context.Context, name string) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, name)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockOperatorMockRecorder) GetProject(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockOperator)(nil).GetProject), ctx, name)
}

// GetProjectEx mocks base method.
func (m *MockOperator) GetProjectEx(ctx context.Context, name, resourceVersion string) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectEx", ctx, name, resourceVersion)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectEx indicates an expected call of GetProjectEx.
func (mr *MockOperatorMockRecorder) GetProjectEx(ctx, name, resourceVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectEx", reflect.TypeOf((*MockOperator)(nil).GetProjectEx), ctx, name, resourceVersion)
}

// ListProjects mocks base method.
func (m *MockOperator) ListProjects(ctx context.Context, query *query.Query) (*v1.ProjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx, query)
	ret0, _ := ret[0].(*v1.ProjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockOperatorMockRecorder) ListProjects(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockOperator)(nil).ListProjects), ctx, query)
}

// ListProjectsEx mocks base method.
func (m *MockOperator) ListProjectsEx(ctx context.Context, query *query.Query) (*models.PageableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsEx", ctx, query)
	ret0, _ := ret[0].(*models.PageableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsEx indicates an expected call of ListProjectsEx.
func (mr *MockOperatorMockRecorder) ListProjectsEx(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsEx", reflect.TypeOf((*MockOperator)(nil).ListProjectsEx), ctx, query)
}

// UpdateProject mocks base method.
func (m *MockOperator) UpdateProject(ctx context.Context, r *v1.Project) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, r)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockOperatorMockRecorder) UpdateProject(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockOperator)(nil).UpdateProject), ctx, r)
}

// WatchProjects mocks base method.
func (m *MockOperator) WatchProjects(ctx context.Context, query *query.Query) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchProjects", ctx, query)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProjects indicates an expected call of WatchProjects.
func (mr *MockOperatorMockRecorder) WatchProjects(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProjects", reflect.TypeOf((*MockOperator)(nil).WatchProjects), ctx, query)
}

// MockProjectReader is a mock of ProjectReader interface.
type MockProjectReader struct {
	ctrl     *gomock.Controller
	recorder *MockProjectReaderMockRecorder
}

// MockProjectReaderMockRecorder is the mock recorder for MockProjectReader.
type MockProjectReaderMockRecorder struct {
	mock *MockProjectReader
}

// NewMockProjectReader creates a new mock instance.
func NewMockProjectReader(ctrl *gomock.Controller) *MockProjectReader {
	mock := &MockProjectReader{ctrl: ctrl}
	mock.recorder = &MockProjectReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectReader) EXPECT() *MockProjectReaderMockRecorder {
	return m.recorder
}

// GetProject mocks base method.
func (m *MockProjectReader) GetProject(ctx context.Context, name string) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, name)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectReaderMockRecorder) GetProject(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectReader)(nil).GetProject), ctx, name)
}

// GetProjectEx mocks base method.
func (m *MockProjectReader) GetProjectEx(ctx context.Context, name, resourceVersion string) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectEx", ctx, name, resourceVersion)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectEx indicates an expected call of GetProjectEx.
func (mr *MockProjectReaderMockRecorder) GetProjectEx(ctx, name, resourceVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectEx", reflect.TypeOf((*MockProjectReader)(nil).GetProjectEx), ctx, name, resourceVersion)
}

// ListProjects mocks base method.
func (m *MockProjectReader) ListProjects(ctx context.Context, query *query.Query) (*v1.ProjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx, query)
	ret0, _ := ret[0].(*v1.ProjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectReaderMockRecorder) ListProjects(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectReader)(nil).ListProjects), ctx, query)
}

// ListProjectsEx mocks base method.
func (m *MockProjectReader) ListProjectsEx(ctx context.Context, query *query.Query) (*models.PageableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsEx", ctx, query)
	ret0, _ := ret[0].(*models.PageableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsEx indicates an expected call of ListProjectsEx.
func (mr *MockProjectReaderMockRecorder) ListProjectsEx(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsEx", reflect.TypeOf((*MockProjectReader)(nil).ListProjectsEx), ctx, query)
}

// WatchProjects mocks base method.
func (m *MockProjectReader) WatchProjects(ctx context.Context, query *query.Query) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchProjects", ctx, query)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProjects indicates an expected call of WatchProjects.
func (mr *MockProjectReaderMockRecorder) WatchProjects(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProjects", reflect.TypeOf((*MockProjectReader)(nil).WatchProjects), ctx, query)
}

// MockRegistryEx is a mock of RegistryEx interface.
type MockRegistryEx struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryExMockRecorder
}

// MockRegistryExMockRecorder is the mock recorder for MockRegistryEx.
type MockRegistryExMockRecorder struct {
	mock *MockRegistryEx
}

// NewMockRegistryEx creates a new mock instance.
func NewMockRegistryEx(ctrl *gomock.Controller) *MockRegistryEx {
	mock := &MockRegistryEx{ctrl: ctrl}
	mock.recorder = &MockRegistryExMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryEx) EXPECT() *MockRegistryExMockRecorder {
	return m.recorder
}

// GetProjectEx mocks base method.
func (m *MockRegistryEx) GetProjectEx(ctx context.Context, name, resourceVersion string) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectEx", ctx, name, resourceVersion)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectEx indicates an expected call of GetProjectEx.
func (mr *MockRegistryExMockRecorder) GetProjectEx(ctx, name, resourceVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectEx", reflect.TypeOf((*MockRegistryEx)(nil).GetProjectEx), ctx, name, resourceVersion)
}

// ListProjectsEx mocks base method.
func (m *MockRegistryEx) ListProjectsEx(ctx context.Context, query *query.Query) (*models.PageableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsEx", ctx, query)
	ret0, _ := ret[0].(*models.PageableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsEx indicates an expected call of ListProjectsEx.
func (mr *MockRegistryExMockRecorder) ListProjectsEx(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsEx", reflect.TypeOf((*MockRegistryEx)(nil).ListProjectsEx), ctx, query)
}

// MockProjectWriter is a mock of ProjectWriter interface.
type MockProjectWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectWriterMockRecorder
}

// MockProjectWriterMockRecorder is the mock recorder for MockProjectWriter.
type MockProjectWriterMockRecorder struct {
	mock *MockProjectWriter
}

// NewMockProjectWriter creates a new mock instance.
func NewMockProjectWriter(ctrl *gomock.Controller) *MockProjectWriter {
	mock := &MockProjectWriter{ctrl: ctrl}
	mock.recorder = &MockProjectWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectWriter) EXPECT() *MockProjectWriterMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectWriter) CreateProject(ctx context.Context, r *v1.Project) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, r)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectWriterMockRecorder) CreateProject(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectWriter)(nil).CreateProject), ctx, r)
}

// DeleteProject mocks base method.
func (m *MockProjectWriter) DeleteProject(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectWriterMockRecorder) DeleteProject(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectWriter)(nil).DeleteProject), ctx, name)
}

// UpdateProject mocks base method.
func (m *MockProjectWriter) UpdateProject(ctx context.Context, r *v1.Project) (*v1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, r)
	ret0, _ := ret[0].(*v1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectWriterMockRecorder) UpdateProject(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectWriter)(nil).UpdateProject), ctx, r)
}
