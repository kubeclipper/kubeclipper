{
  "swagger": "2.0",
  "info": {
    "description": "KubeClipper OpenAPI",
    "title": "KubeClipper",
    "contact": {
      "name": "KubeClipper",
      "url": "github.com/kubeclipper-labs/kubeclipper"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.0-master+$Format:%H$",
    "x-taggroups": []
  },
  "paths": {
    "/api/audit.kubeclipper.io/v1/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Audit"
        ],
        "summary": "List audit events.",
        "operationId": "ListEvents",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/audit.kubeclipper.io/v1/events/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Audit"
        ],
        "summary": "Describe event.",
        "operationId": "DescribeEvent",
        "parameters": [
          {
            "type": "string",
            "description": "event name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/config.kubeclipper.io/v1/componentmeta": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "List offline resource metadata info.",
        "operationId": "ListOfflineResource",
        "parameters": [
          {
            "type": "string",
            "default": false,
            "description": "online or offline resource",
            "name": "online",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/config.kubeclipper.io/v1/components": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "Information about components",
        "operationId": "func3",
        "parameters": [
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "lang=en",
            "description": "component language, support en and zh",
            "name": "lang",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/component.Meta"
              }
            }
          }
        }
      }
    },
    "/api/config.kubeclipper.io/v1/configz": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "Information about the server configuration",
        "operationId": "func2",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/map[string]bool"
            }
          }
        }
      }
    },
    "/api/config.kubeclipper.io/v1/oauth": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Information about the authorization server are published.",
        "operationId": "func1",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/config.kubeclipper.io/v1/template": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "Information about platform template",
        "operationId": "DescribeTemplate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DockerRegistry"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "Update template",
        "operationId": "UpdateTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DockerRegistry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.DockerRegistry"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/config.kubeclipper.io/v1/terminal.key": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "Get rsa public key",
        "operationId": "GetSSHRSAKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.WebTerminal"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Config"
        ],
        "summary": "Create rsa key pair",
        "operationId": "CreateSSHRSAKey",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.WebTerminal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.WebTerminal"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/backuppoints": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List of backup point",
        "operationId": "ListBackupPoints",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "foo~bar,bar~baz",
            "description": "fuzzy search conditions",
            "name": "fuzzy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Create a backup point",
        "operationId": "CreateBackupPoint",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.BackupPoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupPoint"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/backuppoints/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Get a backup point by name",
        "operationId": "DescribeBackupPoint",
        "parameters": [
          {
            "type": "string",
            "description": "backup point name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupPoint"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Update backup point.",
        "operationId": "UpdateBackupPoint",
        "parameters": [
          {
            "type": "string",
            "description": "backup point name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BackupPoint"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Delete a backup point.",
        "operationId": "DeleteBackupPoint",
        "parameters": [
          {
            "type": "string",
            "description": "backup point",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/backups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "List backups.",
        "operationId": "ListBackups",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/backups/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "Describe backup.",
        "operationId": "DescribeBackup",
        "parameters": [
          {
            "type": "string",
            "description": "backup name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List clusters.",
        "operationId": "ListClusters",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Create clusters.",
        "operationId": "CreateClusters",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          },
          {
            "type": "boolean",
            "description": "dry run create clusters",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{cluster}/backups/{backup}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Update backups.",
        "operationId": "UpdateBackup",
        "parameters": [
          {
            "type": "string",
            "description": "cluster name",
            "name": "cluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "backup name",
            "name": "backup",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Delete backups.",
        "operationId": "DeleteBackup",
        "parameters": [
          {
            "type": "string",
            "description": "cluster name",
            "name": "cluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "backup name",
            "name": "backup",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "dry run create clusters",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{cluster}/plugins": {
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Install or uninstall plugins",
        "operationId": "InstallOrUninstallPlugins",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PatchComponents"
            }
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "cluster",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{cluster}/recovery": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "create recovery.",
        "operationId": "CreateRecovery",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Recovery"
            }
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "cluster",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Recovery"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Describe cluster.",
        "operationId": "DescribeCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Update clusters.",
        "operationId": "UpdateClusters",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "dry run update clusters",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Delete clusters.",
        "operationId": "DeleteCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "dry run delete clusters",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{name}/backups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List backups.",
        "operationId": "ListBackupsWithCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Create backups.",
        "operationId": "CreateBackup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "dry run create clusters",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Backup"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{name}/nodes": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Add or remove cluster node.",
        "operationId": "AddOrRemoveNodes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PatchNodes"
            }
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{name}/status": {
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "reset cluster status.",
        "operationId": "ResetClusterStatus",
        "parameters": [
          {
            "type": "boolean",
            "description": "dry run upgrade cluster.",
            "name": "dryRun",
            "in": "query"
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{name}/terminal": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "kubectl web terminal",
        "operationId": "SSHToPod",
        "parameters": [
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "auth token",
            "name": "token",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/clusters/{name}/upgrade": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "upgrade cluster.",
        "operationId": "UpgradeCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUpgrade"
            }
          },
          {
            "type": "boolean",
            "description": "dry run upgrade cluster.",
            "name": "dryRun",
            "in": "query"
          },
          {
            "type": "string",
            "description": "cluster name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/domains": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List domains.",
        "operationId": "ListDomains",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Create domains.",
        "operationId": "CreateDomains",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Domain"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "head": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "check domains exists.",
        "operationId": "CheckDomainExists",
        "parameters": [
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/domains/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Describe domain.",
        "operationId": "GetDomain",
        "parameters": [
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Domain"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Update domain.",
        "operationId": "UpdateDomain",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Domain"
            }
          },
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Domain"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Delete domain and all record association to this domain.",
        "operationId": "DeleteDomain",
        "parameters": [
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/domains/{name}/records": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List records.",
        "operationId": "ListRecords",
        "parameters": [
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "subdomain",
            "name": "subdomain",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Update records.",
        "operationId": "UpdateRecord",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Record"
            }
          },
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Record"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Create records.",
        "operationId": "CreateRecords",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Record"
            }
          },
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Record"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/domains/{name}/records/{subdomain}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Describe records.",
        "operationId": "GetRecord",
        "parameters": [
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "subdomain",
            "name": "subdomain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Region"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Delete records.",
        "operationId": "DeleteRecord",
        "parameters": [
          {
            "type": "string",
            "description": "domain",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "subdomain",
            "name": "subdomain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/leases": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "List leases.",
        "operationId": "ListLeases",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/leases/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "Describe region.",
        "operationId": "DescribeLease",
        "parameters": [
          {
            "type": "string",
            "description": "region name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Region"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/logs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "Get operation log on node.",
        "operationId": "GetOperationLog",
        "parameters": [
          {
            "type": "string",
            "format": "node=%s",
            "description": "node name",
            "name": "node",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "operation=%s",
            "description": "operation id",
            "name": "operation",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "step=%s",
            "description": "step id",
            "name": "step",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "offset=%s",
            "description": "offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.StepLog"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "List nodes.",
        "operationId": "ListNodes",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/nodes/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "Describe nodes.",
        "operationId": "DescribeNode",
        "parameters": [
          {
            "type": "string",
            "description": "node name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "Delete node.",
        "operationId": "DeleteNode",
        "parameters": [
          {
            "type": "string",
            "description": "node name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/nodes/{name}/disable": {
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "Disable nodes.",
        "operationId": "DisableNode",
        "parameters": [
          {
            "type": "string",
            "description": "node name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/nodes/{name}/enable": {
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "Enable nodes.",
        "operationId": "EnableNode",
        "parameters": [
          {
            "type": "string",
            "description": "node name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/nodes/{name}/terminal": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "connector node with ssh protocol",
        "operationId": "SSHToNode",
        "parameters": [
          {
            "type": "string",
            "description": "node name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "auth token",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "user name, password, port",
            "name": "msg",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": 150,
            "description": "terminal cols",
            "name": "cols",
            "in": "query"
          },
          {
            "type": "string",
            "default": 35,
            "description": "terminal rows",
            "name": "rows",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "417": {
            "description": "Expectation Failed",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List operations.",
        "operationId": "ListOperations",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.OperationList"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/operations/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Node"
        ],
        "summary": "Describe operations.",
        "operationId": "DescribeOperation",
        "parameters": [
          {
            "type": "string",
            "description": "operation name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Operation"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/operations/{name}/retry": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "clusters retry operation.",
        "operationId": "RetryCluster",
        "parameters": [
          {
            "type": "boolean",
            "description": "dry run clusters retry operation.",
            "name": "dryRun",
            "in": "query"
          },
          {
            "type": "string",
            "description": "operation name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Cluster"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/regions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "List regions.",
        "operationId": "ListRegions",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/regions/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Region"
        ],
        "summary": "Describe region.",
        "operationId": "DescribeRegion",
        "parameters": [
          {
            "type": "string",
            "description": "region name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Region"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/templates": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "List templates.",
        "operationId": "ListTemplates",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Create template.",
        "operationId": "CreateTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Template"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Template"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/core.kubeclipper.io/v1/templates/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Describe template.",
        "operationId": "DescribeTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Template"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Update template.",
        "operationId": "UpdateTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Template"
            }
          },
          {
            "type": "string",
            "description": "name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Template"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-Cluster"
        ],
        "summary": "Delete template.",
        "operationId": "DeleteTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "List roles.",
        "operationId": "ListRoles",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Create roles.",
        "operationId": "CreateRoles",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GlobalRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.GlobalRole"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "head": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Check roles exist.",
        "operationId": "CheckRolesExist",
        "parameters": [
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/roles/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Describe role.",
        "operationId": "DescribeRole",
        "parameters": [
          {
            "type": "string",
            "description": "role name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.GlobalRole"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Update role.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GlobalRole"
            }
          },
          {
            "type": "string",
            "description": "role name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.GlobalRole"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Delete role.",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "type": "string",
            "description": "role name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/tokens": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "List tokens.",
        "operationId": "ListTokens",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/tokens/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Describe token.",
        "operationId": "DescribeToken",
        "parameters": [
          {
            "type": "string",
            "description": "token name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Token"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "List users.",
        "operationId": "ListUsers",
        "parameters": [
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "format": "role=%s",
            "description": "resource filter by user role",
            "name": "role",
            "in": "query"
          },
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "resource sort reverse or not",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "watch request",
            "name": "watch",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 60,
            "description": "watch timeout seconds",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "type": "string",
            "format": "foo~bar,bar~baz",
            "description": "fuzzy search conditions",
            "name": "fuzzy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Create users.",
        "operationId": "CreateUsers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "head": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Check users exist.",
        "operationId": "CheckUserExist",
        "parameters": [
          {
            "type": "string",
            "format": "labelSelector=%s=%s",
            "description": "resource filter by metadata label",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "type": "string",
            "format": "fieldSelector=%s=%s",
            "description": "resource filter by field",
            "name": "fieldSelector",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Describe user.",
        "operationId": "DescribeUser",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "resource version to query",
            "name": "resourceVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Update user profile.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Delete user.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users/{name}/disable": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Disable user.",
        "operationId": "DisableUser",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users/{name}/enable": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Enable user.",
        "operationId": "EnableUser",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users/{name}/loginrecords": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "List user LoginRecords.",
        "operationId": "ListUserLoginRecords",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users/{name}/password": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Update user password.",
        "operationId": "UpdateUserPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PasswordReset"
            }
          },
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/api/iam.kubeclipper.io/v1/users/{name}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core-IAM"
        ],
        "summary": "Get user role rules.",
        "operationId": "RetrieveRoleTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "user name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.GlobalRole"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/oauth/cb/{callback}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "OAuth callback API, the path param callback is config by identity provider",
        "operationId": "callback",
        "parameters": [
          {
            "type": "string",
            "description": "The oatuh2 idp name",
            "name": "callback",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The access token issued by the authorization server.",
            "name": "access_token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The type of the token issued as described in [RFC6479] Section 7.1. Value is case insensitive.",
            "name": "token_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.",
            "name": "expires_in",
            "in": "query"
          },
          {
            "type": "string",
            "description": "if identical to the scope requested by the client;otherwise, REQUIRED.  The scope of the access token as described by [RFC6479] Section 3.3.",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "string",
            "description": "if the \"state\" parameter was present in the client authorization request.The exact value received from the client.",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oauth.Token"
            }
          }
        }
      }
    },
    "/oauth/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oauth.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oauth.Token"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "428": {
            "description": "Precondition Required",
            "schema": {
              "$ref": "#/definitions/auth.UserMFAProviders"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/oauth/logout": {
      "post": {
        "description": "logout",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "description": "The resource owner password credentials grant type is suitable in\ncases where the resource owner has a trust relationship with the\nclient, such as the device operating system or a highly privileged application.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Oauth login",
        "operationId": "Token",
        "parameters": [
          {
            "type": "string",
            "description": "Value MUST be set to \"password\" or \"verification_code\".",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The resource owner username.",
            "name": "username",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "The resource owner password.",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "mfa provider type, used when grant_type is mfa",
            "name": "mfa_provider",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "mfa verification token",
            "name": "token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "mfa verification code",
            "name": "code",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oauth.Token"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    },
    "/oauth/verification-code": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "send verification code",
        "operationId": "SendVerificationCode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mfa.UserMFAProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "session not exists",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errors.HTTPError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "auth.UserMFAProviders": {
      "properties": {
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mfa.UserMFAProvider"
          }
        }
      }
    },
    "big.Int": {
      "required": [
        "neg",
        "abs"
      ],
      "properties": {
        "abs": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "neg": {
          "type": "boolean"
        }
      }
    },
    "component.JSON": {},
    "component.JSONSchemaProps": {
      "required": [
        "title"
      ],
      "properties": {
        "default": {
          "$ref": "#/definitions/component.JSON"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/component.JSON"
          }
        },
        "enumNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "items": {
          "$ref": "#/definitions/component.JSONSchemaProps"
        },
        "mask": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/component.JSONSchemaProps"
          }
        },
        "props": {
          "$ref": "#/definitions/component.Props"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "component.Meta": {
      "required": [
        "title",
        "description",
        "icon",
        "unique",
        "template",
        "category",
        "name",
        "version",
        "dependence",
        "timeoutSeconds",
        "schema"
      ],
      "properties": {
        "category": {
          "type": "string"
        },
        "dependence": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "schema": {
          "$ref": "#/definitions/component.JSONSchemaProps"
        },
        "template": {
          "type": "boolean"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "unique": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "component.Props": {
      "required": [
        "min"
      ],
      "properties": {
        "max": {
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "errors.HTTPError": {
      "required": [
        "code",
        "message",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "inf.Dec": {
      "required": [
        "unscaled",
        "scale"
      ],
      "properties": {
        "scale": {
          "type": "integer",
          "format": "int32"
        },
        "unscaled": {
          "$ref": "#/definitions/big.Int"
        }
      }
    },
    "map[string]bool": {
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "mfa.UserMFAProvider": {
      "properties": {
        "token": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "models.PageableResponse": {
      "required": [
        "items",
        "totalCount"
      ],
      "properties": {
        "items": {
          "description": "paging data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PageableResponse.items"
          }
        },
        "totalCount": {
          "description": "total count",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.PageableResponse.items": {},
    "oauth.LoginRequest": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "oauth.Token": {
      "required": [
        "access_token"
      ],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "refresh_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    },
    "resource.Quantity": {
      "required": [
        "i",
        "d",
        "s",
        "Format"
      ],
      "properties": {
        "Format": {
          "type": "string"
        },
        "d": {
          "$ref": "#/definitions/resource.infDecAmount"
        },
        "i": {
          "$ref": "#/definitions/resource.int64Amount"
        },
        "s": {
          "type": "string"
        }
      }
    },
    "resource.infDecAmount": {
      "required": [
        "Dec"
      ],
      "properties": {
        "Dec": {
          "$ref": "#/definitions/inf.Dec"
        }
      }
    },
    "resource.int64Amount": {
      "required": [
        "value",
        "scale"
      ],
      "properties": {
        "scale": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1.AttachedVolume": {
      "required": [
        "name",
        "devicePath"
      ],
      "properties": {
        "devicePath": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1.Backup": {
      "required": [
        "kubernetesVersion",
        "fileName",
        "clusterNodes",
        "backupPointName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "backupPointName": {
          "type": "string"
        },
        "backupStatus": {
          "$ref": "#/definitions/v1.BackupStatus"
        },
        "clusterNodes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "kubernetesVersion": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "preferredNode": {
          "type": "string"
        }
      }
    },
    "v1.BackupPoint": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "fsConfig": {
          "$ref": "#/definitions/v1.FsConfig"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "s3Config": {
          "$ref": "#/definitions/v1.S3Config"
        },
        "storageType": {
          "type": "string"
        }
      }
    },
    "v1.BackupStatus": {
      "required": [
        "backupFileSize",
        "backupFileMD5",
        "status"
      ],
      "properties": {
        "backupFileMD5": {
          "type": "string"
        },
        "backupFileSize": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.CNI": {
      "required": [
        "type",
        "podIPv4CIDR",
        "podIPv6CIDR",
        "mtu"
      ],
      "properties": {
        "calico": {
          "$ref": "#/definitions/v1.Calico"
        },
        "localRegistry": {
          "type": "string"
        },
        "mtu": {
          "type": "integer",
          "format": "int32"
        },
        "podIPv4CIDR": {
          "type": "string"
        },
        "podIPv6CIDR": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "calico"
          ]
        }
      }
    },
    "v1.Calico": {
      "required": [
        "IPv4AutoDetection",
        "IPv6AutoDetection",
        "mode",
        "version"
      ],
      "properties": {
        "IPManger": {
          "type": "boolean"
        },
        "IPv4AutoDetection": {
          "type": "string",
          "enum": [
            "first-found",
            "can-reach=DESTINATION",
            "interface=INTERFACE-REGEX",
            "skip-interface=INTERFACE-REGEX"
          ]
        },
        "IPv6AutoDetection": {
          "type": "string",
          "enum": [
            "first-found",
            "can-reach=DESTINATION",
            "interface=INTERFACE-REGEX",
            "skip-interface=INTERFACE-REGEX"
          ]
        },
        "dualStack": {
          "type": "boolean"
        },
        "mode": {
          "type": "string",
          "enum": [
            "BGP",
            "Overlay-IPIP-All",
            "Overlay-IPIP-Cross-Subnet",
            "Overlay-Vxlan-All",
            "Overlay-Vxlan-Cross-Subnet",
            "overlay"
          ]
        },
        "version": {
          "type": "string",
          "enum": [
            "v3.11.2"
          ]
        }
      }
    },
    "v1.Cluster": {
      "required": [
        "type"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "kubeadm": {
          "$ref": "#/definitions/v1.Kubeadm"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "status": {
          "$ref": "#/definitions/v1.ClusterStatus"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.ClusterCondition": {
      "properties": {
        "operation": {
          "type": "string"
        },
        "operationID": {
          "type": "string"
        },
        "operationStatus": {
          "type": "string"
        },
        "startAt": {
          "type": "string"
        }
      }
    },
    "v1.ClusterStatus": {
      "properties": {
        "componentConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ComponentConditions"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ClusterCondition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.ClusterUpgrade": {
      "required": [
        "version",
        "offline",
        "localRegistry"
      ],
      "properties": {
        "localRegistry": {
          "type": "string"
        },
        "offline": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1.Command": {
      "required": [
        "type"
      ],
      "properties": {
        "customCommand": {
          "type": "string"
        },
        "identity": {
          "type": "string"
        },
        "shellCommand": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "$ref": "#/definitions/v1.TemplateCommand"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.Component": {
      "required": [
        "name",
        "version",
        "config"
      ],
      "properties": {
        "config": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1.ComponentConditions": {
      "required": [
        "name",
        "category",
        "status"
      ],
      "properties": {
        "category": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.ContainerRuntime": {
      "required": [
        "containerRuntimeType"
      ],
      "properties": {
        "containerRuntimeType": {
          "type": "string",
          "enum": [
            "docker",
            "containerd"
          ]
        },
        "containerd": {
          "$ref": "#/definitions/v1.Containerd"
        },
        "docker": {
          "$ref": "#/definitions/v1.Docker"
        }
      }
    },
    "v1.Containerd": {
      "properties": {
        "insecureRegistry": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rootDir": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "enum": [
            "1.4.4"
          ]
        }
      }
    },
    "v1.Docker": {
      "properties": {
        "insecureRegistry": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rootDir": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "enum": [
            "19.03.12"
          ]
        }
      }
    },
    "v1.DockerRegistry": {
      "required": [
        "insecureRegistry"
      ],
      "properties": {
        "insecureRegistry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.InsecureRegistry"
          }
        }
      }
    },
    "v1.Domain": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.DomainSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.DomainStatus"
        }
      }
    },
    "v1.DomainSpec": {
      "properties": {
        "description": {
          "type": "string"
        },
        "records": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.Record"
          }
        },
        "syncCluster": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.DomainStatus": {
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1.Etcd": {
      "properties": {
        "dataDir": {
          "type": "string"
        }
      }
    },
    "v1.Event": {
      "required": [
        "requestURI",
        "verb",
        "sourceIP",
        "success",
        "RequestReceivedTimestamp",
        "StageTimestamp",
        "resource",
        "resourceName",
        "subresource",
        "resourceAPIGroup",
        "resourceAPIVersion"
      ],
      "properties": {
        "RequestReceivedTimestamp": {
          "type": "string"
        },
        "StageTimestamp": {
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "auditID": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "requestURI": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "resourceAPIGroup": {
          "type": "string"
        },
        "resourceAPIVersion": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "sourceIP": {
          "type": "string"
        },
        "subresource": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "userAgent": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        }
      }
    },
    "v1.FsConfig": {
      "properties": {
        "backupRootDir": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1.GlobalRole": {
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PolicyRule"
          }
        }
      }
    },
    "v1.InsecureRegistry": {
      "required": [
        "host"
      ],
      "properties": {
        "createAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.KubeComponents": {
      "required": [
        "cni"
      ],
      "properties": {
        "cni": {
          "$ref": "#/definitions/v1.CNI"
        },
        "etcd": {
          "$ref": "#/definitions/v1.Etcd"
        },
        "kubeProxy": {
          "$ref": "#/definitions/v1.KubeProxy"
        },
        "kubelet": {
          "$ref": "#/definitions/v1.Kubelet"
        }
      }
    },
    "v1.KubeProxy": {
      "properties": {
        "ipvs": {
          "type": "boolean"
        }
      }
    },
    "v1.Kubeadm": {
      "required": [
        "masters",
        "kubernetesVersion",
        "containerRuntime",
        "networking",
        "kubeComponents"
      ],
      "properties": {
        "certSANs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Component"
          }
        },
        "containerRuntime": {
          "$ref": "#/definitions/v1.ContainerRuntime"
        },
        "description": {
          "type": "string"
        },
        "kubeComponents": {
          "$ref": "#/definitions/v1.KubeComponents"
        },
        "kubernetesVersion": {
          "type": "string",
          "enum": [
            "v1.20.13"
          ]
        },
        "localRegistry": {
          "type": "string"
        },
        "masters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.WorkerNode"
          }
        },
        "networking": {
          "$ref": "#/definitions/v1.Networking"
        },
        "offline": {
          "type": "boolean"
        },
        "workerNodeVip": {
          "type": "string"
        },
        "workers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.WorkerNode"
          }
        }
      }
    },
    "v1.Kubelet": {
      "required": [
        "rootDir"
      ],
      "properties": {
        "rootDir": {
          "type": "string"
        }
      }
    },
    "v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        }
      }
    },
    "v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "type": "string"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
          "type": "string"
        }
      }
    },
    "v1.Networking": {
      "required": [
        "serviceSubnet",
        "podSubnet",
        "dnsDomain"
      ],
      "properties": {
        "dnsDomain": {
          "type": "string"
        },
        "podSubnet": {
          "type": "string"
        },
        "serviceSubnet": {
          "type": "string"
        }
      }
    },
    "v1.Node": {
      "required": [
        "proxyIpv4CIDR"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "proxyIpv4CIDR": {
          "description": "proxy ip address of node, only use when bastion not able to reach client ip but client can reach bastion ip",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1.NodeStatus"
        }
      }
    },
    "v1.NodeAddress": {
      "required": [
        "type",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.NodeCondition": {
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastHeartbeatTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.NodeStatus": {
      "required": [
        "ipv4DefaultIP",
        "ipv4DefaultGw",
        "containerRuntime"
      ],
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeAddress"
          }
        },
        "allocatable": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "capacity": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeCondition"
          }
        },
        "containerRuntime": {
          "$ref": "#/definitions/v1.ContainerRuntime"
        },
        "ipv4DefaultGw": {
          "description": "node ipv4 default gateway ip",
          "type": "string"
        },
        "ipv4DefaultIP": {
          "description": "node ipv4 default gateway interface ip",
          "type": "string"
        },
        "nodeInfo": {
          "$ref": "#/definitions/v1.NodeSystemInfo"
        },
        "volumesAttached": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.AttachedVolume"
          }
        }
      }
    },
    "v1.NodeSystemInfo": {
      "required": [
        "hostname",
        "os",
        "arch",
        "platform",
        "platformFamily",
        "platformVersion",
        "kernelVersion",
        "kernelArch",
        "hostId"
      ],
      "properties": {
        "arch": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "kernelArch": {
          "type": "string"
        },
        "kernelVersion": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "platformFamily": {
          "type": "string"
        },
        "platformVersion": {
          "type": "string"
        }
      }
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          }
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.Operation": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "status": {
          "$ref": "#/definitions/v1.OperationStatus"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Step"
          }
        }
      }
    },
    "v1.OperationCondition": {
      "properties": {
        "status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.StepStatus"
          }
        },
        "stepID": {
          "type": "string"
        }
      }
    },
    "v1.OperationList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Operation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.OperationStatus": {
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.OperationCondition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.ParseRecord": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.PasswordReset": {
      "required": [
        "currentPassword",
        "newPassword"
      ],
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "v1.PatchComponents": {
      "required": [
        "uninstall",
        "components"
      ],
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Component"
          }
        },
        "uninstall": {
          "type": "boolean"
        }
      }
    },
    "v1.PatchNodes": {
      "required": [
        "operation",
        "nodes",
        "role"
      ],
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.WorkerNode"
          }
        },
        "operation": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. '*' represents all verbs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.Record": {
      "properties": {
        "createTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "parseRecord": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ParseRecord"
          }
        },
        "rr": {
          "type": "string"
        }
      }
    },
    "v1.Recovery": {
      "required": [
        "useBackupName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "useBackupName": {
          "type": "string"
        }
      }
    },
    "v1.Region": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    },
    "v1.S3Config": {
      "required": [
        "bucket",
        "endpoint",
        "accessKeyID",
        "accessKeySecret",
        "region",
        "ssl"
      ],
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "accessKeySecret": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "ssl": {
          "type": "boolean"
        }
      }
    },
    "v1.Step": {
      "required": [
        "errIgnore"
      ],
      "properties": {
        "action": {
          "type": "string"
        },
        "afterRunCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Command"
          }
        },
        "beforeRunCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Command"
          }
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Command"
          }
        },
        "errIgnore": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.StepNode"
          }
        },
        "retryTimes": {
          "type": "integer",
          "format": "int32"
        },
        "timeout": {
          "type": "string"
        }
      }
    },
    "v1.StepLog": {
      "properties": {
        "content": {
          "type": "string"
        },
        "deliverySize": {
          "type": "integer",
          "format": "int64"
        },
        "logSize": {
          "type": "integer",
          "format": "int64"
        },
        "node": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        }
      }
    },
    "v1.StepNode": {
      "properties": {
        "hostname": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ipv4": {
          "type": "string"
        }
      }
    },
    "v1.StepStatus": {
      "properties": {
        "endAt": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "node": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "response": {
          "type": "string"
        },
        "startAt": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.Taint": {
      "required": [
        "key",
        "effect"
      ],
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1.Template": {
      "required": [
        "config"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "config": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    },
    "v1.TemplateCommand": {
      "properties": {
        "data": {
          "type": "string"
        },
        "identity": {
          "type": "string"
        }
      }
    },
    "v1.Token": {
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.TokenSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.TokenStatus"
        }
      }
    },
    "v1.TokenSpec": {
      "required": [
        "ttl",
        "tokenType",
        "username",
        "token"
      ],
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "issuer": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "ttl": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.TokenStatus": {
      "properties": {
        "expiresAt": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1.User": {
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.UserStatus"
        }
      }
    },
    "v1.UserSpec": {
      "required": [
        "email"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lang": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "v1.UserStatus": {
      "properties": {
        "lastLoginTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1.WebTerminal": {
      "properties": {
        "privateKey": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1.WorkerNode": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Taint"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}