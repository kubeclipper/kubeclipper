# 创建集群-添加s3备份空间-编辑备份空间-查看备份空间-备份集群-检查集群状态-
# 恢复集群-检查集群状态-删除集群备份-删除备份空间-删除集群
fixtures:
  - ConfigFixture
  - SampleDataFixture

defaults:
  ssl: False
  request_headers:
    content-type: application/json
    accept: application/json

vars:
  - &username "admin"
  - &password "Thinkbig1"
  - &cluster_name "apitest_s3_cluster_name"
  - &backupspace_des "s3的有效备份空间"
  - &s3_endpoint "172.20.163.233:9000"
  - &s3_username "admin"
  - &s3_password "Aa123456"

tests:
  - name: user_login
    url: /apis/oauth/login
    method: POST
    data:
      username: *username
      password: *password
    status: 200
    response_json_paths:
      $.token_type: Bearer

  - name: get_available_node
    url: /apis/api/core.kubeclipper.io/v1/nodes
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    query_parameters:
      labelSelector: topology.kubeclipper.io/region=default,!kubeclipper.io/nodeRole
      limit: -1
      page: 1
    status: 200

  - name: create_cluster
    url: /apis/api/core.kubeclipper.io/v1/clusters
    method: POST
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    data:
      addons: []
      apiVersion: "core.kubeclipper.io/v1"
      certSANs: []
      cni:
        calico:
          IPManger: true
          IPv4AutoDetection: "first-found"
          IPv6AutoDetection: ""
          mode: "Overlay-Vxlan-All"
          mtu: 1440
        type: "calico"
        version: "v3.22.4"
      containerRuntime:
        insecureRegistry: []
        rootDir: "/var/lib/containerd"
        type: "containerd"
        version: "1.6.4"
      etcd:
        dataDir: "/var/lib/etcd"
      kind: "Cluster"
      kubeProxy: {}
      kubelet:
        rootDir: "/var/lib/kubelet"
      kubernetesVersion: "v1.23.6"
      localRegistry: ""
      masters:
        - id: $HISTORY['get_available_node'].$RESPONSE['$.items[0].metadata.name']
          label: {}
          taints: []
      metadata:
        annotations:
          kubeclipper.io/offline: ""
        labels:
          topology.kubeclipper.io/region: "default"
        name: *cluster_name
      networking:
        dnsDomain: "cluster.local"
        ipFamily: "ipvs"
        pods:
          cidrBlocks:
            - "10.96.0.0/16"
        proxyMode: "ipvs"
        services:
          cidrBlocks:
            - "172.25.0.0/24"
        workerNodeVip: "169.254.169.100"
      provider:
        name: "kubeadm"
      workers: []
    response_json_paths:
      $.masters.[0].id: $HISTORY['get_available_node'].$RESPONSE['$.items[0].metadata.name']

  - name: add_s3_backup_space
    url: /apis/api/core.kubeclipper.io/v1/backuppoints
    method: POST
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    data:
      metadata:
        name: apitest-s3
      storageType: S3
      s3Config:
        bucket: kubeclipper
        endpoint: *s3_endpoint
        accessKeyID: *s3_username
        accessKeySecret: *s3_password
    response_json_paths:
      $.kind: BackupPoint

  - name: edit_backup_space
    url: /apis/api/core.kubeclipper.io/v1/backuppoints/$HISTORY['add_s3_backup_space'].$RESPONSE['$.metadata.name']
    method: PUT
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    data:
      description: *backupspace_des
      s3Config:
        accessKeyID: *s3_username
        accessKeySecret: *s3_password
      storageType: "s3"
    response_json_paths:
      $.description: *backupspace_des

  - name: search_backup_space_in_list
    url: /apis/api/core.kubeclipper.io/v1/backuppoints
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    query_parameters:
      fuzzy: name~apitest-s3
      labelSelector: "!kubeclipper.io/role-template"
      limit: -1
      fieldSelector:
      page: 1
    response_json_paths:
      $.items[0].description: *backupspace_des
      $.totalCount: 1

  - name: wait_cluster_status_is_running
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    poll:
      count: 60
      delay: 10
    response_json_paths:
      $.status.phase: "Running"

  - name: get_cluster_detail
    url: /api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    status: 200

  - name: edit_cluster_to_select_s3_backup_space
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: PUT
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    data:
      kind: Cluster
      apiVersion: core.kubeclipper.io/v1
      metadata:
        name: $HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
        labels:
          topology.kubeclipper.io/region: default
          kubeclipper.io/backupPoint: $HISTORY['add_s3_backup_space'].$RESPONSE['$.metadata.name']
        annotations:
          kubeclipper.io/offline: ""
        finalizers:
          - finalizer.cluster.kubeclipper.io
        resourceVersion: $HISTORY['get_cluster_detail'].$RESPONSE['$.metadata.resourceVersion']
      masters:
        - id: $HISTORY['get_available_node'].$RESPONSE['$.items[0].metadata.name']
          containerRuntime:
            type: ""
      workers: []
      kubernetesVersion: v1.23.6
      kubeProxy: {}
      etcd:
        dataDir: /var/lib/etcd
      kubelet:
        rootDir: /var/lib/kubelet
      networking:
        ipFamily: ipvs
        services:
          cidrBlocks:
            - 172.25.0.0/24
        pods:
          cidrBlocks:
            - 10.96.0.0/16
        dnsDomain: cluster.local
        proxyMode: ipvs
        workerNodeVip: 169.254.169.100
      containerRuntime:
        type: containerd
        version: 1.6.4
        rootDir: /var/lib/containerd
      cni:
        localRegistry: ""
        type: calico
        version: v3.22.4
        criType: containerd
        offline: true
        namespace: kube-system
        calico:
          IPv4AutoDetection: first-found
          IPv6AutoDetection: ""
          mode: Overlay-Vxlan-All
          IPManger: true
          mtu: 1440
      kubeConfig: $HISTORY['get_cluster_detail'].$RESPONSE['$.kubeConfig']
      addons: []
      status:
        phase: Running
        versions:
          controlPlane: ""
          apiserver: ""
          controllerManager: ""
          scheduler: ""
    status: 200

  - name: create_cluster_backup
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']/backups
    method: POST
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    data:
      metadata:
        name: test-backup
        annotations: {}
      description: ""
    response_json_paths:
      $.backupPointName: apitest-s3

  - name: check_cluster_status_is_BackingUp
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    response_json_paths:
      $.status.phase: "BackingUp"

  - name: check_cluster_status_is_running
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    poll:
      count: 60
      delay: 10
    response_json_paths:
      $.status.phase: "Running"

  - name: check_backup_list
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']/backups?limit=10
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    response_json_paths:
      $.items[?(@.backupPointName=='apitest-s3')].backupPointName: apitest-s3

  - name: recovery_cluster
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']/recovery
    method: POST
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    data:
      useBackupName: $HISTORY['create_cluster_backup'].$RESPONSE['$.metadata.name']
    status: 200

  - name: check_cluster_status_is_Restoring
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    response_json_paths:
      $.status.phase: "Restoring"

  - name: check_cluster_status_is_running
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    poll:
      count: 60
      delay: 10
    response_json_paths:
      $.status.phase: "Running"

  - name: delete_cluster_backup
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']/backups/$HISTORY['create_cluster_backup'].$RESPONSE['$.metadata.name']
    method: DELETE
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    status: 200

  - name: delete_backup_space
    url: /apis/api/core.kubeclipper.io/v1/backuppoints/$HISTORY['add_s3_backup_space'].$RESPONSE['$.metadata.name']
    method: DELETE
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    status: 200

  - name: search_backup_space_in_list_check_delete_sucessfully
    url: /apis/api/core.kubeclipper.io/v1/backuppoints
    method: GET
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    query_parameters:
      fuzzy: name~apitest-s3
      labelSelector: "!kubeclipper.io/role-template"
      limit: -1
      fieldSelector:
      page: 1
    response_json_paths:
      $.totalCount: 0

  - name: delete_cluster
    url: /apis/api/core.kubeclipper.io/v1/clusters/$HISTORY['create_cluster'].$RESPONSE['$.metadata.name']
    method: DELETE
    request_headers:
      Authorization: Bearer $HISTORY['user_login'].$RESPONSE['$.access_token']
    status: 200
